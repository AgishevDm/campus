stages:
  - check_node_version
  - lint
  - test
  - deploy

.default: &default
  image: node:20.18.0-alpine
  before_script:
    - cd $PROJECT_DIR
    - npm install --no-progress --cache-folder .

check_node_version:
  stage: check_node_version
  image: node:20.18.0-alpine 
  script:
    - echo "Running on Node.js version:"
    - node -v
  tags:
    - amd64

lint_frontend:
  stage: lint
  extends: .default
  variables:
    PROJECT_DIR: frontend
  script:
    - npm run lint
  tags:
    - amd64

lint_admin:
  stage: lint
  extends: .default
  variables:
    PROJECT_DIR: admin
  script:
    - npm run lint
  tags:
    - amd64

lint_backend:
  stage: lint
  extends: .default
  variables:
    PROJECT_DIR: backend
  script:
    - npm run lint
  tags:
    - amd64

deploy_backend:
  stage: deploy
  image: docker:20.10
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_TAG
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
  script:
    - echo "Building and pushing Docker image for backend..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE -f backend/backend.Dockerfile backend/
    - echo "Checking image size..."
    - docker inspect $DOCKER_IMAGE --format='{{.Size}}'
    - docker push $DOCKER_IMAGE
  rules:
    - if: '$CI_COMMIT_TAG != null'
  tags:
    - amd64

deploy_frontend:
  stage: deploy
  image: docker:20.10
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_TAG
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
  script:
    - echo "Building and pushing Docker image for frontend..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE -f frontend/frontend.Dockerfile frontend/
    - echo "Checking image size..."
    - docker inspect $DOCKER_IMAGE --format='{{.Size}}'
    - docker push $DOCKER_IMAGE
  rules:
    - if: '$CI_COMMIT_TAG != null'
  tags:
    - amd64

deploy_admin:
  stage: deploy
  image: docker:20.10
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/admin:$CI_COMMIT_TAG
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
  script:
    - echo "Building and pushing Docker image for admin..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE -f admin/admin.Dockerfile admin/
    - docker push $DOCKER_IMAGE
  rules:
    - if: '$CI_COMMIT_TAG != null'
  tags:
    - amd64

deploy_redis:
  stage: deploy
  image: docker:20.10
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/redis:$CI_COMMIT_TAG
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
  script:
    - echo "Building and pushing Docker image for redis..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE -f redis/redis.Dockerfile redis/
    - docker push $DOCKER_IMAGE
  rules:
    - if: '$CI_COMMIT_TAG != null'
  tags:
    - amd64

deploy_telegram_bot:
  stage: deploy
  image: docker:20.10
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/telegram-bot:$CI_COMMIT_TAG
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
  script:
    - echo "Building and pushing Docker image for Telegram bot..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE -f telegram-bot/Dockerfile telegram-bot/
    - echo "Checking image size..."
    - docker inspect $DOCKER_IMAGE --format='{{.Size}}'
    - docker push $DOCKER_IMAGE
  rules:
    - if: '$CI_COMMIT_TAG != null'
  tags:
    - amd64